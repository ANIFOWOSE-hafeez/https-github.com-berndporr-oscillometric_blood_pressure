 




  
 
  



  
  

  



[en-GB]showdayofmonth=false


MSc Project: Oscillometric Blood Pressure
Belinda Kneubuhler





language=C++
range-units=single
















School of Engineering

College of Science and Engineering

University of Glasgow



Submitted in fulfilment of the requirements for the

Degree of 








Abstract

Abstract text goes here.

Acknowledgements

Acknowledgements text goes here.

Declaration

With the exception of chapters 1, 2 and 3, which contain introductory material, all work in this thesis was carried out by the author unless otherwise explicitly stated.



Introduction
Problem Description



Objectives



About this Report
This report is split up into tree main parts. The first part, chapter cp:theory, discusses the background of oscillometric blood preessure measurement. It focussed on research material and its implementaion in real time processing. 

The second part, chapter cp:sw, discusses the implementation of the application that was developed based on the needs described above and the findings made in the preceding chapter.

The third part, chapter cp:res, looks back at what was achieved in the project and gives an outlook on further recommended steps.
Theory 
This chapter discusses the findings of researching existing and proposed algorithms for determining systolic and diastolic blood pressure through the oscillometric method.

The method was described and tested by Geddes et al. in 1982. The mean arterial pressure (MAP) is generally described as the pressure at which oscillation amplitudes are maximal. Geddes is determining ratios of the MAP to find the systolic and diastolic blood pressure. He defines the ratio for the systolic pressure to be 0.5 and the ratio for the diastolic pulse as 0.8. These ratios were found in an experimental way and Geddes acknowledges that the systolic pressure is overestimated and the ratio for the diastolic pulse is not constant for a range of different diastolic pressures.

Later studies tried to find accurate ratios, mostly experimentally. Mathematical models confirmed that a generalised ratio cannot be found. Parameters like the age of the subject and in this regard, the arterial stiffness influence the ratios.
Software
This chapter contains a description of the developed software. It provides a brief overview of the important architecture and algorithm implementations. The projects GitHub page provides the full source code, setup instructions and Doxygen documentation. 
The project is licensed under the GNU General Public License v2.0.

Overview
The application is split into user interface (UI) and data processing. Each part runs in their own thread and they are kept separated from each other. The data processing class is called  and the user interface class . 

Communication between the classes is done with callbacks in an Observer pattern from the processing to the window class. The processing class is an observable subject that the window class registers to. The window has a reference to the processing class to pass on user input.

The user interface is built with Qt, an open-source widget toolkit for creating graphical user interfaces. Additionally, the subset Qt Widgets for Technical Applications (Qwt) is used to display plots of the acquired data.

The processing class handles data acquisition and processing, sending notifications to the observer with instructions on what action to perform or what values to update.


Compilation
The project is set up as a CMake project. Usually, Qt projects are set up using qmake (a .pro file), but CMake is supported as well. This application chose CMake because it is more powerful and allows integration with other tools, e.g. for continuous integration. 

CMake ensures all required dependencies are installed as defined in the file CMakeList.txt and automatically generates a Makefile. This Makefile is used to build the project, linking all defined librairies.
For example, this application requires the C++20 standard for the implemented algorithm. CMake generates an error when trying to build the application with a compiler that does not support the C++20 standard.



Class Diagram
The fig:CD shows a simplified class diagram of the application. Following is a more in depth discussion of its elements.


The Class Diagram.


User Interface
The user interface is shown in fig:UI. It is split up into two parts. The left side accepts user input and gives instructions to the user what they have to do to take their own blood pressure. The right side shows the data that is being acquired in real time. There are two plots. The upper plot shows low pass filtered pressure data and the lower shows the data band pass filtered. This is the oscillogram that is the main input for the algorithm to determine the user's blood pressure.




UI

As mentioned above, the graphical user interface is built with Qt.
The QtDesigner was used to design a first draft of the UI, but because this does not allow integration into applications that are built outside of the Qt development environment, the whole UI was completely built in C++ code from this draft.


concept

Signals and slots

thread safety

settings

Menu
A menubar provides access to an information pane as well as a settings pane. Both open up as new windows and disable user input on the main window. Data acquisition is kept running and is displayed in the plots.

Information
Version nbr, links

Settings
Explain settings


Data Processing
In the Processing class, the data is acquired and processed. The acquisition is handled by the ComediHandler handles data acquisition a

Third Party Software


Qt 
CppThread a wrapper to the std::thread class written by Bernd Porr to make ... 
iir1 An implementation of infinite impulse response (IIR) filters for sample-by-sample, real time processing written in C++ by Bernd Porr. 
plog 


Results and Discussion
The goal of this project was to be able to conduct experiments with test subjects and to record datasets. Unfortunately, due to the ongoing situation when this project was conducted, this was not possible. Even though all possible safety measurements were considered and approved by the University's risk assessment department, the approval process was rendered impossible to go through within the given time frame. Apart from not being able to record any datasets, the algorithm might suffer from systematic errors due to subjective charasteristics in the developers blood pressure oscillations. 


This chapter highlights important results of the project.


- valve needs to open continuously to have a steady stream of 3mmHg/s
  opening introduces noise

- many algorithms only work for clean data

- MAP is used for diagnostics 

Conclusion

This chapter discusses the outcome of the project and proposes the next steps to take.

Try not to mention "IT"

Testing on human subjects other than the developer could not take place due to the situation at the time of writing. A concept for testing was introduced and approved by the risk assessment department, however, the ethics application could not be resolved with the situation making the application process impossible to go through in the short period of time that this thesis was written.


Derivation of the equation

This is such boring material that it has been relegated to an appendix. Let's check an equation:

Let's hope I got it correct.



IEEEtran

